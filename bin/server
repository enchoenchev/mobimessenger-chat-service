#!/usr/bin/env node

/**
 * Dependencies.
 */
const debug = require("debug")("auth-service:server");
const http = require("http");
const socketio = require("socket.io");
const socketService = require("../services/socket");
require("dotenv").config();
const app = require("../app");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

/**
 * Create socket.io instance
 */
const io = socketio(server, { cors: "*" });

/**
 * Add authentication validation middleware for socket.io
 */
socketService.addAuthenticationMiddleware(io);

/**
 * Hook socket.io listeners
 */
socketService.hookListeners(io);

/**
 * Hook event listeners to the HTTP server
 */
server.on("error", onError);
server.on("listening", onListening);

/**
 * Hook event listeners to the process
 */
process.on("unhandledRejection", (reason, p) => {
  console.error(reason, "Unhandled Rejection at Promise", p);
  server.close(() => {
    console.error("Shutting down process...");
    process.exit(1);
  });
});
process.on("uncaughtException", (err) => {
  console.error(err, "Uncaught Exception thrown. Shutting down process...");
  process.exit(1);
});

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
